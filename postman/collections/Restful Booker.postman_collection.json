{
	"info": {
		"_postman_id": "3b283d57-d500-4768-a894-88159a06b8c5",
		"name": "Restful Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22915813"
	},
	"item": [
		{
			"name": "Post-CreateToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"// Updated response time test to 300ms\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Response time is less than 300ms\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Response body contains a non-empty token value\r",
							"pm.test(\"Response body contains a non-empty token value\", function () {\r",
							"     \r",
							"    // Validate the response data\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('token'); // Added validation for token property\r",
							"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token value should not be empty\");\r",
							"});\r",
							"\r",
							"// Validate that the response Content-Type is application/json\r",
							"pm.test(\"Validate that the response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Response body contains a token field\r",
							"pm.test(\"Response body contains a token field\", function () {\r",
							"    \r",
							"    // Validate the presence of token field in the response\r",
							"    pm.expect(responseData).to.have.property('token');\r",
							"});\r",
							"\r",
							"\r",
							"// Verify the response body\r",
							"pm.test(\"Verify the response body\", function () {\r",
							"    \r",
							"    // Validate the response data and token type\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.token).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				},
				"description": "This HTTP POST request is used to authenticate and obtain a token for accessing the Restful Booker API. The request should include a JSON payload in the raw request body with the \"username\" and \"password\" fields.\n\n### Request Body\n\n- `username` (string): The username for authentication.\n    \n- `password` (string): The password for authentication.\n    \n\nUpon successful execution, the response will have a status code of 200 and a Content-Type of application/json. The response body will contain a JSON object with a \"token\" field, which holds the authentication token.\n\n### Response\n\n- `token` (string): The authentication token required for accessing protected endpoints.\n    \n\nIt is essential to include tests to validate the successful retrieval of the authentication token and handle potential error scenarios to ensure the reliability of the authentication process."
			},
			"response": []
		},
		{
			"name": "CreateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.clear();\r",
							"\r",
							"const firstName1 = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"console.log(firstName1);\r",
							"pm.collectionVariables.set(\"fakeFirstName\", firstName1);\r",
							"\r",
							"const lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
							"console.log(lastName);\r",
							"pm.collectionVariables.set(\"fakeLastName\", lastName);\r",
							"\r",
							"const depositPaid = pm.variables.replaceIn('{{$randomBoolean}}');\r",
							"console.log(depositPaid);\r",
							"pm.collectionVariables.set(\"fakeDepositPaid\", depositPaid);\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate the schema for the response\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.have.property('bookingid');\r",
							"  pm.expect(responseData.booking).to.be.an('object');\r",
							"  pm.expect(responseData.booking).to.have.property('firstname');\r",
							"  pm.expect(responseData.booking).to.have.property('lastname');\r",
							"  pm.expect(responseData.booking).to.have.property('totalprice');\r",
							"  pm.expect(responseData.booking).to.have.property('depositpaid');\r",
							"  pm.expect(responseData.booking.bookingdates).to.be.an('object');\r",
							"  pm.expect(responseData.booking.bookingdates).to.have.property('checkin');\r",
							"  pm.expect(responseData.booking.bookingdates).to.have.property('checkout');\r",
							"  pm.expect(responseData.booking).to.have.property('additionalneeds');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data length is greater than 0\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(Object.keys(responseData).length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{fakeFirstName}}\",\r\n    \"lastname\" : \"{{fakeLastName}}\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : {{fakeDepositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "getBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema of the response body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('firstname');\r",
							"    pm.expect(responseData).to.have.property('lastname');\r",
							" \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/1",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.include.all.keys('firstname', 'lastname', 'totalprice', 'depositpaid', 'bookingdates', 'additionalneeds');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Checkin and checkout dates are in valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"  pm.expect(responseData.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Totalprice is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.totalprice).to.be.a('number');\r",
							"    pm.expect(responseData.totalprice).to.be.at.least(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token=8ab6b922fbbdfb5",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"MERT\",\r\n    \"lastname\" : \"SEVTEK\",\r\n    \"totalprice\" : 11122222,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/1",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "fakeFirstName",
			"value": "",
			"type": "string"
		},
		{
			"key": "fakeLastName",
			"value": "",
			"type": "string"
		},
		{
			"key": "fakeDepositPaid",
			"value": "",
			"type": "string"
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "variable_key",
			"value": "",
			"disabled": true
		}
	]
}